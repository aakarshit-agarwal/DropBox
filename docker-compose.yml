version: '3'
services:
  mongodb:
    container_name: ${DATABASE_HOST}
    image: mongo
    volumes:
      - ./data/db:/data/db
    ports:
      - "${DATABASE_PORT}:${DATABASE_PORT}"
    environment:
      NODE_ENV: ${NODE_ENV}
    env_file:
      - ./config/.${NODE_ENV}.env

  zookeeper:
    container_name: ${ZOOKEEPER_HOST}
    image: wurstmeister/zookeeper
    ports:
      - ${ZOOKEEPER_PORT}
    environment:
      NODE_ENV: ${NODE_ENV}
    env_file:
      - ./config/.${NODE_ENV}.env

  kafka:
    container_name: ${KAFKA_HOST}
    image: wurstmeister/kafka
    ports:
      - ${KAFKA_PORT}:${KAFKA_PORT}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      NODE_ENV: ${NODE_ENV}
      KAFKA_ADVERTISED_HOST_NAME: ${KAFKA_HOST}
      KAFKA_ADVERTISED_PORT: ${KAFKA_PORT}
      KAFKA_ZOOKEEPER_CONNECT: ${ZOOKEEPER_HOST}:${ZOOKEEPER_PORT}
    depends_on:
      - zookeeper
    env_file:
      - ./config/.${NODE_ENV}.env

  user_management_service:
    container_name: ${USER_MANAGEMENT_SERVICE_HOST}
    build: 
      context: .
      dockerfile: ./user_management_service/Dockerfile
    volumes:
      - ./logs/user_management_service:/home/application/user_management_service/logs
    # command: tail -F anything
    ports:
      - ${USER_MANAGEMENT_SERVICE_PORT}:${USER_MANAGEMENT_SERVICE_PORT}
    environment:
      NODE_ENV: ${NODE_ENV}
      KAFKA_ZOOKEEPER_CONNECT: ${ZOOKEEPER_HOST}:${ZOOKEEPER_PORT} 
    depends_on:
      - mongodb
      - kafka
    env_file:
      - ./config/.${NODE_ENV}.env

  authentication_cache:
    container_name: ${AUTHENTICATION_MANAGEMENT_SERVICE_CACHE_HOST}
    image: redis:alpine
    restart: always
    ports:
      - ${AUTHENTICATION_MANAGEMENT_SERVICE_CACHE_PORT}:${AUTHENTICATION_MANAGEMENT_SERVICE_CACHE_PORT}
    volumes: 
      - /cache:/home/cache
    command: redis-server --save 20 1 --loglevel warning --requirepass ${AUTHENTICATION_MANAGEMENT_SERVICE_CACHE_PASSWORD}
    environment:
      NODE_ENV: ${NODE_ENV}
    env_file:
      - ./config/.${NODE_ENV}.env

  authentication_management_service:
    container_name: ${AUTHENTICATION_MANAGEMENT_SERVICE_HOST}
    build: 
      context: .
      dockerfile: ./authentication_management_service/Dockerfile
    ports:
      - ${AUTHENTICATION_MANAGEMENT_SERVICE_PORT}:${AUTHENTICATION_MANAGEMENT_SERVICE_PORT}
    environment:
      NODE_ENV: ${NODE_ENV}
      KAFKA_ZOOKEEPER_CONNECT: ${ZOOKEEPER_HOST}:${ZOOKEEPER_PORT} 
    depends_on:
      - authentication_cache
      - mongodb
      - kafka
    env_file:
      - ./config/.${NODE_ENV}.env

  metadata_management_service:
    container_name: ${METADATA_MANAGEMENT_SERVICE_HOST}
    build: 
      context: .
      dockerfile: ./metadata_management_service/Dockerfile
    ports:
      - ${METADATA_MANAGEMENT_SERVICE_PORT}:${METADATA_MANAGEMENT_SERVICE_PORT}
    environment:
      NODE_ENV: ${NODE_ENV}
      KAFKA_ZOOKEEPER_CONNECT: ${ZOOKEEPER_HOST}:${ZOOKEEPER_PORT} 
    depends_on:
      - mongodb
      - kafka
    env_file:
      - ./config/.${NODE_ENV}.env

  directory_management_service:
    container_name: ${DIRECTORY_MANAGEMENT_SERVICE_HOST}
    build: 
      context: .
      dockerfile: ./directory_management_service/Dockerfile
    ports:
      - ${DIRECTORY_MANAGEMENT_SERVICE_PORT}:${DIRECTORY_MANAGEMENT_SERVICE_PORT}
    environment:
      NODE_ENV: ${NODE_ENV}
      KAFKA_ZOOKEEPER_CONNECT: ${ZOOKEEPER_HOST}:${ZOOKEEPER_PORT} 
    depends_on:
      - mongodb
      - kafka
      - metadata_management_service
    env_file:
      - ./config/.${NODE_ENV}.env

  file_management_service:
    container_name: ${FILE_MANAGEMENT_SERVICE_HOST}
    build: 
      context: .
      dockerfile: ./file_management_service/Dockerfile
    ports:
      - ${FILE_MANAGEMENT_SERVICE_PORT}:${FILE_MANAGEMENT_SERVICE_PORT}
    environment:
      NODE_ENV: ${NODE_ENV}
      KAFKA_ZOOKEEPER_CONNECT: ${ZOOKEEPER_HOST}:${ZOOKEEPER_PORT} 
    depends_on:
      - mongodb
      - kafka
      - directory_management_service
    env_file:
      - ./config/.${NODE_ENV}.env

  api_gateway:
    container_name: ${API_GATEWAY_HOST}
    build: 
      context: .
      dockerfile: ./api_gateway/Dockerfile
    ports:
      - ${API_GATEWAY_PORT}:${API_GATEWAY_PORT}
    environment:
      NODE_ENV: ${NODE_ENV}
      KAFKA_ZOOKEEPER_CONNECT: ${ZOOKEEPER_HOST}:${ZOOKEEPER_PORT} 
    depends_on:
      - user_management_service
      - authentication_management_service
      - metadata_management_service
      - directory_management_service
      - file_management_service
    env_file:
      - ./config/.${NODE_ENV}.env
