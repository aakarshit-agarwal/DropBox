version: '3'
services:
  elasticsearch:
    container_name: ${ELASTICSEARCH_HOST}
    image: docker.elastic.co/elasticsearch/elasticsearch:8.4.1
    ports:
        - ${ELASTICSEARCH_PORT}:${ELASTICSEARCH_PORT}
    volumes:
      - ./data/elasticsearch:/usr/share/elasticsearch/data
    mem_limit: 1g
    environment:
      - NODE_ENV=${NODE_ENV}
      - xpack.security.enabled=false
      - node.name=elasticsearch
      - cluster.name=elasticsearch-cluster
      - discovery.type=single-node
      - ingest.geoip.downloader.enabled=false
      - "ES_JAVA_OPTS=-Xms128m -Xmx128m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    env_file:
      - ./config/.${NODE_ENV}.env

  kibana:
    container_name: ${KIBANA_HOST}
    image: docker.elastic.co/kibana/kibana:8.4.1
    ports:
        - ${KIBANA_PORT}:${KIBANA_PORT}
    environment:
      NODE_ENV: ${NODE_ENV}
      ELASTICSEARCH_HOSTS: http://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}
      # ELASTICSEARCH_USERNAME: kibana
      # ELASTICSEARCH_PASSWORD: yourstrongpasswordhere
      xpack.security.enabled: false
    env_file:
      - ./config/.${NODE_ENV}.env
    depends_on:
      - elasticsearch

  filebeat:
    container_name: ${FILEBEAT_HOST}
    image: docker.elastic.co/beats/filebeat:8.4.1
    user: ${FILEBEAT_USER}
    command: filebeat -c filebeat.yml -e --strict.perms=false
    volumes:
      - ./config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/var/logs:ro
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      NODE_ENV: ${NODE_ENV}
    env_file:
      - ./config/.${NODE_ENV}.env
    depends_on:
      - elasticsearch

  prometheus:
    image: prom/prometheus:v2.20.1
    container_name: prometheus
    # volumes:
    #   - ./prometheus:/etc/prometheus
    #   - prometheus_data:/prometheus
    ports:
      - 9090:9090
    expose:
      - 9090
  
  grafana:
    image: grafana/grafana:7.1.5
    container_name: grafana
    # volumes:
    #   - grafana_data:/var/lib/grafana
    #   - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    ports:
      - 3000:3000
    expose:
      - 3000

  mongodb:
    container_name: ${DATABASE_HOST}
    image: mongo
    volumes:
      - ./data/db:/data/db
    ports:
      - "${DATABASE_PORT}:${DATABASE_PORT}"
    environment:
      NODE_ENV: ${NODE_ENV}
    env_file:
      - ./config/.${NODE_ENV}.env

  zookeeper:
    container_name: ${ZOOKEEPER_HOST}
    image: wurstmeister/zookeeper
    ports:
      - ${ZOOKEEPER_PORT}
    environment:
      NODE_ENV: ${NODE_ENV}
    env_file:
      - ./config/.${NODE_ENV}.env

  kafka:
    container_name: ${KAFKA_HOST}
    image: wurstmeister/kafka
    ports:
      - ${KAFKA_PORT}:${KAFKA_PORT}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      NODE_ENV: ${NODE_ENV}
      KAFKA_ADVERTISED_HOST_NAME: ${KAFKA_HOST}
      KAFKA_ADVERTISED_PORT: ${KAFKA_PORT}
      KAFKA_ZOOKEEPER_CONNECT: ${ZOOKEEPER_HOST}:${ZOOKEEPER_PORT}
    depends_on:
      - zookeeper
    env_file:
      - ./config/.${NODE_ENV}.env

  user_management_service:
    container_name: ${USER_MANAGEMENT_SERVICE_HOST}
    build: 
      context: .
      dockerfile: ./user_management_service/Dockerfile
    volumes:
      - ./logs/user_management_service:/home/application/user_management_service/logs
    # command: tail -F anything
    ports:
      - ${USER_MANAGEMENT_SERVICE_PORT}:${USER_MANAGEMENT_SERVICE_PORT}
    environment:
      NODE_ENV: ${NODE_ENV}
      KAFKA_ZOOKEEPER_CONNECT: ${ZOOKEEPER_HOST}:${ZOOKEEPER_PORT} 
    depends_on:
      - mongodb
      - kafka
    env_file:
      - ./config/.${NODE_ENV}.env

  authentication_cache:
    container_name: ${AUTHENTICATION_MANAGEMENT_SERVICE_CACHE_HOST}
    image: redis:alpine
    restart: always
    ports:
      - ${AUTHENTICATION_MANAGEMENT_SERVICE_CACHE_PORT}:${AUTHENTICATION_MANAGEMENT_SERVICE_CACHE_PORT}
    volumes: 
      - /cache:/home/cache
    command: redis-server --save 20 1 --loglevel warning --requirepass ${AUTHENTICATION_MANAGEMENT_SERVICE_CACHE_PASSWORD}
    environment:
      NODE_ENV: ${NODE_ENV}
    env_file:
      - ./config/.${NODE_ENV}.env

  authentication_management_service:
    container_name: ${AUTHENTICATION_MANAGEMENT_SERVICE_HOST}
    build: 
      context: .
      dockerfile: ./authentication_management_service/Dockerfile
    ports:
      - ${AUTHENTICATION_MANAGEMENT_SERVICE_PORT}:${AUTHENTICATION_MANAGEMENT_SERVICE_PORT}
    environment:
      NODE_ENV: ${NODE_ENV}
      KAFKA_ZOOKEEPER_CONNECT: ${ZOOKEEPER_HOST}:${ZOOKEEPER_PORT} 
    depends_on:
      - authentication_cache
      - mongodb
      - kafka
    env_file:
      - ./config/.${NODE_ENV}.env

  metadata_management_service:
    container_name: ${METADATA_MANAGEMENT_SERVICE_HOST}
    build: 
      context: .
      dockerfile: ./metadata_management_service/Dockerfile
    ports:
      - ${METADATA_MANAGEMENT_SERVICE_PORT}:${METADATA_MANAGEMENT_SERVICE_PORT}
    environment:
      NODE_ENV: ${NODE_ENV}
      KAFKA_ZOOKEEPER_CONNECT: ${ZOOKEEPER_HOST}:${ZOOKEEPER_PORT} 
    depends_on:
      - mongodb
      - kafka
    env_file:
      - ./config/.${NODE_ENV}.env

  directory_management_service:
    container_name: ${DIRECTORY_MANAGEMENT_SERVICE_HOST}
    build: 
      context: .
      dockerfile: ./directory_management_service/Dockerfile
    ports:
      - ${DIRECTORY_MANAGEMENT_SERVICE_PORT}:${DIRECTORY_MANAGEMENT_SERVICE_PORT}
    environment:
      NODE_ENV: ${NODE_ENV}
      KAFKA_ZOOKEEPER_CONNECT: ${ZOOKEEPER_HOST}:${ZOOKEEPER_PORT} 
    depends_on:
      - mongodb
      - kafka
      - metadata_management_service
    env_file:
      - ./config/.${NODE_ENV}.env

  file_management_service:
    container_name: ${FILE_MANAGEMENT_SERVICE_HOST}
    build: 
      context: .
      dockerfile: ./file_management_service/Dockerfile
    ports:
      - ${FILE_MANAGEMENT_SERVICE_PORT}:${FILE_MANAGEMENT_SERVICE_PORT}
    environment:
      NODE_ENV: ${NODE_ENV}
      KAFKA_ZOOKEEPER_CONNECT: ${ZOOKEEPER_HOST}:${ZOOKEEPER_PORT} 
    depends_on:
      - mongodb
      - kafka
      - directory_management_service
    env_file:
      - ./config/.${NODE_ENV}.env

  api_gateway:
    container_name: ${API_GATEWAY_HOST}
    build: 
      context: .
      dockerfile: ./api_gateway/Dockerfile
    ports:
      - ${API_GATEWAY_PORT}:${API_GATEWAY_PORT}
    environment:
      NODE_ENV: ${NODE_ENV}
      KAFKA_ZOOKEEPER_CONNECT: ${ZOOKEEPER_HOST}:${ZOOKEEPER_PORT} 
    depends_on:
      - user_management_service
      - authentication_management_service
      - metadata_management_service
      - directory_management_service
      - file_management_service
    env_file:
      - ./config/.${NODE_ENV}.env
